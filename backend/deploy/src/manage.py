from flask.cli import FlaskGroup
from sqlalchemy_utils import database_exists
from sqlalchemy import create_engine,inspect
from server import app
from server.models import db,Management,Faculty,Department,Subject

import os,json

cli=FlaskGroup(app)

@cli.command('create_db')
def create_db():
    subjects = [
        "История",
        "Теория вероятностей",
        "Военная история",
        "Общевойсковая подготовка",
        "Методы анализа данных",
        "Экономика",
        "Языки программирования",
        "Операционные системы",
        "Математический анализ",
        "Специальные главы алгебры",
        "Аналитическая геометрия",
        "Дискретная математика",
        "Психология и педагогика",
        "Английский язык",
        "Топография",
        "Информатика",
        "Культурология",
        "РХБ защита",
        "Социология",
        "Физика",
        "Физическая подготовка",
        "Философия",
        "Огневая подготовка"
    ]
    for s in subjects:
        db.session.add(Subject(title=s))


    faculties = [
        "Факультет конструкции летательных аппаратов",
        "Факультет систем управления ракетно-космических комплексов",
        "Факультет радиоэлектронных систем космических комплексов",
        "Факультет инженерного и электромеханического обеспечения",
        "Факультет сбора и обработки информации",
        "Факультет специальных информационных технологий",
        "Факультет топогеодезического обеспечения и картографии",
        "Факультет средств ракетно-космической обороны",
        "Факультет автоматизированных систем управления войсками"
    ]
    for f in faculties:
        db.session.add(Faculty(title=f))

    departments = [
        "Кафедра контроля качества и испытания вооружения, военной и специальной техники",
        "Кафедра космических аппаратов и средств межорбитальной транспортировки",
        "Кафедра конструкций ракет-носителей",
        "Кафедра стартовых и технических комплексов",
        "Кафедра заправочного оборудования",
        "Кафедра навигационного-баллистического обеспечения применения космических средств и теории полета летательных аппаратов",
        "Кафедра автономных систем управления",
        "Кафедра бортового электрооборудования и энергетических систем летательных аппаратов",
        "Кафедра управления организационно-техническими системами космического назначения",
        "Кафедра информационно-вычислительных систем и сетей",
        "Кафедра бортовых информационных и измерительных комплексов",
        "Кафедра автоматизированных систем подготовки и пуска ракет космического назначения",
        "Кафедра математического и программного обеспечения",
        "Кафедра передающих, антенно-фидерных устройств и средств сев",
        "Кафедра космических радиотехнических систем",
        "Кафедра космической радиолокации и радионавигации",
        "Кафедра телеметрических систем и комплексной обработки информации",
        "Кафедра систем и средств радиоэлектронной борьбы космического назначения",
        "Кафедра сетей и систем связи космических комплексов",
        "Кафедра приемных устройств и радиоавтоматики",
        "Кафедра инженерного обеспечения и маскировки",
        "Кафедра специальных сооружений ракетно-космических комплексов",
        "Кафедра систем жизнеобеспечения объектов наземной космической инфраструктуры",
        "Кафедра энергоснабжения объектов наземной космической инфраструктуры",
        "Кафедра оптико-электронных средств контроля",
        "Кафедра технологий и средств геофизического обеспечения",
        "Кафедра технических средств комплексного контроля ракетно-космических объектов",
        "Кафедра космического радиоэлектронного контроля",
        "Кафедра систем сбора и обработки информации",
        "Кафедра инженерного анализа",
        "Кафедра информационно-аналитической работы",
        "Кафедра топогеодезического обеспечения",
        "Кафедра картографии",
        "Кафедра высшей геодезии",
        "Кафедра фототопографии и фотограмметрии",
        "Применение и эксплуатация средств предупреждения о ракетном нападении",
        "Применение и эксплуатация средств противоракетной обороны",
        "Применение и эксплуатация средств противокосмической обороны и контроля космического пространства",
        "Кафедра системного анализа и математического обеспечения автоматизированных систем управления (войсками)",
        "Кафедра технологий и средств технического обеспечения и эксплуатации автоматизированных систем управления (войсками)",
        "Кафедра технологий и средств комплексной обработки и передачи информации в автоматизированных системах управления (войсками)",
        "Кафедра автоматизированных систем управления космических комплексов",
        "Программно-алгоритмическое обеспечения автоматизированных систем управления ракетно-космической обороны",
        "Метрологического обеспечения вооружения, военной и специальной техники"
    ] 

    for d in departments:
        db.session.add(Department(title=d))


    if not os.path.exists(f'{app.config["FOLDER_DATA"]}/files/'):
        os.mkdir(f'{app.config["FOLDER_DATA"]}/files/')

    if not os.path.exists(f'{app.config["FOLDER_DATA"]}/documents/'):
        os.mkdir(f'{app.config["FOLDER_DATA"]}/documents/')

    engine = create_engine(app.config["SQLALCHEMY_DATABASE_URI"])
    db.drop_all()
    db.create_all()
    db.session.add(Management(email='Admin@localhost.com',password='admin_password'))
    db.session.add(Management(email='SuperUser@localhost.com',password='superuser_password'))
    db.session.commit()
    print("Бд успешно создана.\n\nДиректория для хранения анкет успешно создана.\n\nДиректория для хранения сканов документов создана")

@cli.command('clear_db')
def clear_db():
    action=str(input('Хочешь удалить всю БД? Д/н: '))
    if action == 'Д' or action == 'д':
        db.drop_all()
        db.session.commit()
        print('Бд успешно очищена')
    else:
        print('Отмена удаления.')

if __name__ == '__main__':
    cli()